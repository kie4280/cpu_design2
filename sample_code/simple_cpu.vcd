$date
	Wed May 13 11:05:39 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # zero $end
$var wire 1 $ sign $end
$var wire 1 % reg_write $end
$var wire 1 & reg_dst $end
$var wire 32 ' instruction [31:0] $end
$var wire 1 ( branch_eq $end
$var wire 1 ) branch $end
$var wire 1 * alu_src $end
$var wire 3 + alu_op [2:0] $end
$var wire 4 , alu_ctrl [3:0] $end
$var wire 32 - RTdata [31:0] $end
$var wire 32 . RSdata [31:0] $end
$var wire 32 / RDdata [31:0] $end
$var wire 5 0 RD_addr [4:0] $end
$var wire 32 1 ProgramCounter_w [31:0] $end
$var wire 32 2 ProgramCounter_o [31:0] $end
$var wire 32 3 ProgramCounter_i [31:0] $end
$var wire 32 4 ProgramCounter_b [31:0] $end
$var wire 32 5 ProgramCounter_4w [31:0] $end
$var wire 32 6 ProgramCounter_4 [31:0] $end
$var wire 32 7 Mux_ALU [31:0] $end
$scope module AC $end
$var wire 6 8 funct_i [5:0] $end
$var wire 3 9 ALUOp_i [2:0] $end
$var reg 4 : ALUCtrl_o [3:0] $end
$var reg 1 $ Sign_extend_o $end
$upscope $end
$scope module ALU $end
$var wire 4 ; ctrl_i [3:0] $end
$var wire 1 " rst_n $end
$var wire 1 # zero_o $end
$var wire 32 < src2_i [31:0] $end
$var wire 32 = src1_i [31:0] $end
$var wire 32 > result_out [31:0] $end
$var wire 1 ? overflow_out $end
$var wire 1 @ cout_out $end
$var reg 4 A ALU_Ctrl [3:0] $end
$var reg 3 B comp [2:0] $end
$var reg 32 C result_o [31:0] $end
$scope module alu $end
$var wire 4 D ALU_control [3:0] $end
$var wire 3 E comp [2:0] $end
$var wire 32 F result [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 G src2 [31:0] $end
$var wire 32 H src1 [31:0] $end
$var wire 32 I result_wire [31:0] $end
$var wire 33 J carry [32:0] $end
$var reg 1 K A_invert $end
$var reg 1 L B_invert $end
$var reg 1 @ cout $end
$var reg 2 M operation [1:0] $end
$var reg 1 ? overflow $end
$var reg 32 N result_reg [31:0] $end
$var reg 1 # zero $end
$scope begin genblk1[1] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 O cin $end
$var wire 3 P comp [2:0] $end
$var wire 2 Q operation [1:0] $end
$var wire 1 R src1 $end
$var wire 1 S src2 $end
$var wire 1 T cout $end
$var wire 1 U add_result $end
$var reg 1 V result $end
$scope module add_part $end
$var wire 1 W A $end
$var wire 1 X B $end
$var wire 1 O CIN $end
$var wire 1 U SUM $end
$var wire 1 T COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 Y cin $end
$var wire 3 Z comp [2:0] $end
$var wire 2 [ operation [1:0] $end
$var wire 1 \ src1 $end
$var wire 1 ] src2 $end
$var wire 1 ^ cout $end
$var wire 1 _ add_result $end
$var reg 1 ` result $end
$scope module add_part $end
$var wire 1 a A $end
$var wire 1 b B $end
$var wire 1 Y CIN $end
$var wire 1 _ SUM $end
$var wire 1 ^ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 c cin $end
$var wire 3 d comp [2:0] $end
$var wire 2 e operation [1:0] $end
$var wire 1 f src1 $end
$var wire 1 g src2 $end
$var wire 1 h cout $end
$var wire 1 i add_result $end
$var reg 1 j result $end
$scope module add_part $end
$var wire 1 k A $end
$var wire 1 l B $end
$var wire 1 c CIN $end
$var wire 1 i SUM $end
$var wire 1 h COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 m cin $end
$var wire 3 n comp [2:0] $end
$var wire 2 o operation [1:0] $end
$var wire 1 p src1 $end
$var wire 1 q src2 $end
$var wire 1 r cout $end
$var wire 1 s add_result $end
$var reg 1 t result $end
$scope module add_part $end
$var wire 1 u A $end
$var wire 1 v B $end
$var wire 1 m CIN $end
$var wire 1 s SUM $end
$var wire 1 r COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 w cin $end
$var wire 3 x comp [2:0] $end
$var wire 2 y operation [1:0] $end
$var wire 1 z src1 $end
$var wire 1 { src2 $end
$var wire 1 | cout $end
$var wire 1 } add_result $end
$var reg 1 ~ result $end
$scope module add_part $end
$var wire 1 !" A $end
$var wire 1 "" B $end
$var wire 1 w CIN $end
$var wire 1 } SUM $end
$var wire 1 | COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 #" cin $end
$var wire 3 $" comp [2:0] $end
$var wire 2 %" operation [1:0] $end
$var wire 1 &" src1 $end
$var wire 1 '" src2 $end
$var wire 1 (" cout $end
$var wire 1 )" add_result $end
$var reg 1 *" result $end
$scope module add_part $end
$var wire 1 +" A $end
$var wire 1 ," B $end
$var wire 1 #" CIN $end
$var wire 1 )" SUM $end
$var wire 1 (" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 -" cin $end
$var wire 3 ." comp [2:0] $end
$var wire 2 /" operation [1:0] $end
$var wire 1 0" src1 $end
$var wire 1 1" src2 $end
$var wire 1 2" cout $end
$var wire 1 3" add_result $end
$var reg 1 4" result $end
$scope module add_part $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 -" CIN $end
$var wire 1 3" SUM $end
$var wire 1 2" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 7" cin $end
$var wire 3 8" comp [2:0] $end
$var wire 2 9" operation [1:0] $end
$var wire 1 :" src1 $end
$var wire 1 ;" src2 $end
$var wire 1 <" cout $end
$var wire 1 =" add_result $end
$var reg 1 >" result $end
$scope module add_part $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 7" CIN $end
$var wire 1 =" SUM $end
$var wire 1 <" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 A" cin $end
$var wire 3 B" comp [2:0] $end
$var wire 2 C" operation [1:0] $end
$var wire 1 D" src1 $end
$var wire 1 E" src2 $end
$var wire 1 F" cout $end
$var wire 1 G" add_result $end
$var reg 1 H" result $end
$scope module add_part $end
$var wire 1 I" A $end
$var wire 1 J" B $end
$var wire 1 A" CIN $end
$var wire 1 G" SUM $end
$var wire 1 F" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 K" cin $end
$var wire 3 L" comp [2:0] $end
$var wire 2 M" operation [1:0] $end
$var wire 1 N" src1 $end
$var wire 1 O" src2 $end
$var wire 1 P" cout $end
$var wire 1 Q" add_result $end
$var reg 1 R" result $end
$scope module add_part $end
$var wire 1 S" A $end
$var wire 1 T" B $end
$var wire 1 K" CIN $end
$var wire 1 Q" SUM $end
$var wire 1 P" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 U" cin $end
$var wire 3 V" comp [2:0] $end
$var wire 2 W" operation [1:0] $end
$var wire 1 X" src1 $end
$var wire 1 Y" src2 $end
$var wire 1 Z" cout $end
$var wire 1 [" add_result $end
$var reg 1 \" result $end
$scope module add_part $end
$var wire 1 ]" A $end
$var wire 1 ^" B $end
$var wire 1 U" CIN $end
$var wire 1 [" SUM $end
$var wire 1 Z" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 _" cin $end
$var wire 3 `" comp [2:0] $end
$var wire 2 a" operation [1:0] $end
$var wire 1 b" src1 $end
$var wire 1 c" src2 $end
$var wire 1 d" cout $end
$var wire 1 e" add_result $end
$var reg 1 f" result $end
$scope module add_part $end
$var wire 1 g" A $end
$var wire 1 h" B $end
$var wire 1 _" CIN $end
$var wire 1 e" SUM $end
$var wire 1 d" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 i" cin $end
$var wire 3 j" comp [2:0] $end
$var wire 2 k" operation [1:0] $end
$var wire 1 l" src1 $end
$var wire 1 m" src2 $end
$var wire 1 n" cout $end
$var wire 1 o" add_result $end
$var reg 1 p" result $end
$scope module add_part $end
$var wire 1 q" A $end
$var wire 1 r" B $end
$var wire 1 i" CIN $end
$var wire 1 o" SUM $end
$var wire 1 n" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 s" cin $end
$var wire 3 t" comp [2:0] $end
$var wire 2 u" operation [1:0] $end
$var wire 1 v" src1 $end
$var wire 1 w" src2 $end
$var wire 1 x" cout $end
$var wire 1 y" add_result $end
$var reg 1 z" result $end
$scope module add_part $end
$var wire 1 {" A $end
$var wire 1 |" B $end
$var wire 1 s" CIN $end
$var wire 1 y" SUM $end
$var wire 1 x" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 }" cin $end
$var wire 3 ~" comp [2:0] $end
$var wire 2 !# operation [1:0] $end
$var wire 1 "# src1 $end
$var wire 1 ## src2 $end
$var wire 1 $# cout $end
$var wire 1 %# add_result $end
$var reg 1 &# result $end
$scope module add_part $end
$var wire 1 '# A $end
$var wire 1 (# B $end
$var wire 1 }" CIN $end
$var wire 1 %# SUM $end
$var wire 1 $# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 )# cin $end
$var wire 3 *# comp [2:0] $end
$var wire 2 +# operation [1:0] $end
$var wire 1 ,# src1 $end
$var wire 1 -# src2 $end
$var wire 1 .# cout $end
$var wire 1 /# add_result $end
$var reg 1 0# result $end
$scope module add_part $end
$var wire 1 1# A $end
$var wire 1 2# B $end
$var wire 1 )# CIN $end
$var wire 1 /# SUM $end
$var wire 1 .# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 3# cin $end
$var wire 3 4# comp [2:0] $end
$var wire 2 5# operation [1:0] $end
$var wire 1 6# src1 $end
$var wire 1 7# src2 $end
$var wire 1 8# cout $end
$var wire 1 9# add_result $end
$var reg 1 :# result $end
$scope module add_part $end
$var wire 1 ;# A $end
$var wire 1 <# B $end
$var wire 1 3# CIN $end
$var wire 1 9# SUM $end
$var wire 1 8# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 =# cin $end
$var wire 3 ># comp [2:0] $end
$var wire 2 ?# operation [1:0] $end
$var wire 1 @# src1 $end
$var wire 1 A# src2 $end
$var wire 1 B# cout $end
$var wire 1 C# add_result $end
$var reg 1 D# result $end
$scope module add_part $end
$var wire 1 E# A $end
$var wire 1 F# B $end
$var wire 1 =# CIN $end
$var wire 1 C# SUM $end
$var wire 1 B# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 G# cin $end
$var wire 3 H# comp [2:0] $end
$var wire 2 I# operation [1:0] $end
$var wire 1 J# src1 $end
$var wire 1 K# src2 $end
$var wire 1 L# cout $end
$var wire 1 M# add_result $end
$var reg 1 N# result $end
$scope module add_part $end
$var wire 1 O# A $end
$var wire 1 P# B $end
$var wire 1 G# CIN $end
$var wire 1 M# SUM $end
$var wire 1 L# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 Q# cin $end
$var wire 3 R# comp [2:0] $end
$var wire 2 S# operation [1:0] $end
$var wire 1 T# src1 $end
$var wire 1 U# src2 $end
$var wire 1 V# cout $end
$var wire 1 W# add_result $end
$var reg 1 X# result $end
$scope module add_part $end
$var wire 1 Y# A $end
$var wire 1 Z# B $end
$var wire 1 Q# CIN $end
$var wire 1 W# SUM $end
$var wire 1 V# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 [# cin $end
$var wire 3 \# comp [2:0] $end
$var wire 2 ]# operation [1:0] $end
$var wire 1 ^# src1 $end
$var wire 1 _# src2 $end
$var wire 1 `# cout $end
$var wire 1 a# add_result $end
$var reg 1 b# result $end
$scope module add_part $end
$var wire 1 c# A $end
$var wire 1 d# B $end
$var wire 1 [# CIN $end
$var wire 1 a# SUM $end
$var wire 1 `# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 e# cin $end
$var wire 3 f# comp [2:0] $end
$var wire 2 g# operation [1:0] $end
$var wire 1 h# src1 $end
$var wire 1 i# src2 $end
$var wire 1 j# cout $end
$var wire 1 k# add_result $end
$var reg 1 l# result $end
$scope module add_part $end
$var wire 1 m# A $end
$var wire 1 n# B $end
$var wire 1 e# CIN $end
$var wire 1 k# SUM $end
$var wire 1 j# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 o# cin $end
$var wire 3 p# comp [2:0] $end
$var wire 2 q# operation [1:0] $end
$var wire 1 r# src1 $end
$var wire 1 s# src2 $end
$var wire 1 t# cout $end
$var wire 1 u# add_result $end
$var reg 1 v# result $end
$scope module add_part $end
$var wire 1 w# A $end
$var wire 1 x# B $end
$var wire 1 o# CIN $end
$var wire 1 u# SUM $end
$var wire 1 t# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 y# cin $end
$var wire 3 z# comp [2:0] $end
$var wire 2 {# operation [1:0] $end
$var wire 1 |# src1 $end
$var wire 1 }# src2 $end
$var wire 1 ~# cout $end
$var wire 1 !$ add_result $end
$var reg 1 "$ result $end
$scope module add_part $end
$var wire 1 #$ A $end
$var wire 1 $$ B $end
$var wire 1 y# CIN $end
$var wire 1 !$ SUM $end
$var wire 1 ~# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 %$ cin $end
$var wire 3 &$ comp [2:0] $end
$var wire 2 '$ operation [1:0] $end
$var wire 1 ($ src1 $end
$var wire 1 )$ src2 $end
$var wire 1 *$ cout $end
$var wire 1 +$ add_result $end
$var reg 1 ,$ result $end
$scope module add_part $end
$var wire 1 -$ A $end
$var wire 1 .$ B $end
$var wire 1 %$ CIN $end
$var wire 1 +$ SUM $end
$var wire 1 *$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 /$ cin $end
$var wire 3 0$ comp [2:0] $end
$var wire 2 1$ operation [1:0] $end
$var wire 1 2$ src1 $end
$var wire 1 3$ src2 $end
$var wire 1 4$ cout $end
$var wire 1 5$ add_result $end
$var reg 1 6$ result $end
$scope module add_part $end
$var wire 1 7$ A $end
$var wire 1 8$ B $end
$var wire 1 /$ CIN $end
$var wire 1 5$ SUM $end
$var wire 1 4$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 9$ cin $end
$var wire 3 :$ comp [2:0] $end
$var wire 2 ;$ operation [1:0] $end
$var wire 1 <$ src1 $end
$var wire 1 =$ src2 $end
$var wire 1 >$ cout $end
$var wire 1 ?$ add_result $end
$var reg 1 @$ result $end
$scope module add_part $end
$var wire 1 A$ A $end
$var wire 1 B$ B $end
$var wire 1 9$ CIN $end
$var wire 1 ?$ SUM $end
$var wire 1 >$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 C$ cin $end
$var wire 3 D$ comp [2:0] $end
$var wire 2 E$ operation [1:0] $end
$var wire 1 F$ src1 $end
$var wire 1 G$ src2 $end
$var wire 1 H$ cout $end
$var wire 1 I$ add_result $end
$var reg 1 J$ result $end
$scope module add_part $end
$var wire 1 K$ A $end
$var wire 1 L$ B $end
$var wire 1 C$ CIN $end
$var wire 1 I$ SUM $end
$var wire 1 H$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 M$ cin $end
$var wire 3 N$ comp [2:0] $end
$var wire 2 O$ operation [1:0] $end
$var wire 1 P$ src1 $end
$var wire 1 Q$ src2 $end
$var wire 1 R$ cout $end
$var wire 1 S$ add_result $end
$var reg 1 T$ result $end
$scope module add_part $end
$var wire 1 U$ A $end
$var wire 1 V$ B $end
$var wire 1 M$ CIN $end
$var wire 1 S$ SUM $end
$var wire 1 R$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module a $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 W$ cin $end
$var wire 3 X$ comp [2:0] $end
$var wire 2 Y$ operation [1:0] $end
$var wire 1 Z$ src1 $end
$var wire 1 [$ src2 $end
$var wire 1 \$ cout $end
$var wire 1 ]$ add_result $end
$var reg 1 ^$ result $end
$scope module add_part $end
$var wire 1 _$ A $end
$var wire 1 `$ B $end
$var wire 1 W$ CIN $end
$var wire 1 ]$ SUM $end
$var wire 1 \$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope module last $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 a$ cin $end
$var wire 1 b$ equal_in $end
$var wire 2 c$ operation [1:0] $end
$var wire 1 d$ src1 $end
$var wire 1 e$ src2 $end
$var wire 1 f$ cout $end
$var wire 1 g$ add_result $end
$var reg 1 h$ result $end
$scope module add_part $end
$var wire 1 i$ A $end
$var wire 1 j$ B $end
$var wire 1 a$ CIN $end
$var wire 1 g$ SUM $end
$var wire 1 f$ COUT $end
$upscope $end
$upscope $end
$scope module start $end
$var wire 1 K A_invert $end
$var wire 1 L B_invert $end
$var wire 1 k$ cin $end
$var wire 3 l$ comp [2:0] $end
$var wire 2 m$ operation [1:0] $end
$var wire 1 n$ src1 $end
$var wire 1 o$ src2 $end
$var wire 1 p$ cout $end
$var wire 1 q$ add_result $end
$var reg 1 r$ result $end
$scope module add_part $end
$var wire 1 s$ A $end
$var wire 1 t$ B $end
$var wire 1 k$ CIN $end
$var wire 1 q$ SUM $end
$var wire 1 p$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 u$ src2_i [31:0] $end
$var wire 32 v$ sum_o [31:0] $end
$var wire 32 w$ src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 x$ src2_i [31:0] $end
$var wire 32 y$ sum_o [31:0] $end
$var wire 32 z$ src1_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 {$ instr_op_i [5:0] $end
$var wire 1 " rst_n $end
$var reg 1 * ALUSrc_o $end
$var reg 3 |$ ALU_op_o [2:0] $end
$var reg 1 ( Branch_eq $end
$var reg 1 ) Branch_o $end
$var reg 1 & RegDst_o $end
$var reg 1 % RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 }$ pc_addr_i [31:0] $end
$var reg 32 ~$ instr_o [31:0] $end
$var integer 32 !% i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 * select_i $end
$var wire 32 "% data1_i [31:0] $end
$var wire 32 #% data0_i [31:0] $end
$var reg 32 $% data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 %% data0_i [31:0] $end
$var wire 32 &% data1_i [31:0] $end
$var wire 1 '% select_i $end
$var reg 32 (% data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 )% data0_i [4:0] $end
$var wire 5 *% data1_i [4:0] $end
$var wire 1 & select_i $end
$var reg 5 +% data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 ,% pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 -% pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 .% RDaddr_i [4:0] $end
$var wire 32 /% RDdata_i [31:0] $end
$var wire 5 0% RSaddr_i [4:0] $end
$var wire 32 1% RSdata_o [31:0] $end
$var wire 5 2% RTaddr_i [4:0] $end
$var wire 32 3% RTdata_o [31:0] $end
$var wire 1 % RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 4% data_i [15:0] $end
$var wire 1 $ sign_i $end
$var reg 32 5% data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 6% data_i [31:0] $end
$var wire 32 7% data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxx00 7%
b0xxxxxxxxxxxxxxxx 6%
b0xxxxxxxxxxxxxxxx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
bx (%
0'%
bx &%
bx %%
bx $%
bx #%
b0xxxxxxxxxxxxxxxx "%
b100000 !%
bx ~$
bx }$
b0 |$
bx {$
b0xxxxxxxxxxxxxxxx00 z$
bx y$
bx x$
bx w$
bx v$
b100 u$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
bx m$
bz l$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
bx c$
zb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
bx Y$
bz X$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
bx O$
bz N$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
bx E$
bz D$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
bx ;$
bz :$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
bx 1$
bz 0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
bx '$
bz &$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
bx {#
bz z#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
bx q#
bz p#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
bx g#
bz f#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
bx ]#
bz \#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
bx S#
bz R#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
bx I#
bz H#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
bx ?#
bz >#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
bx 5#
bz 4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
bx +#
bz *#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
bx !#
bz ~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
bx u"
bz t"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
bx k"
bz j"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
bx a"
bz `"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
bx W"
bz V"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
bx M"
bz L"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
bx C"
bz B"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
bx 9"
bz 8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
bx /"
bz ."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
bx %"
bz $"
x#"
x""
x!"
x~
x}
x|
x{
xz
bx y
bz x
xw
xv
xu
xt
xs
xr
xq
xp
bx o
bz n
xm
xl
xk
xj
xi
xh
xg
xf
bx e
bz d
xc
xb
xa
x`
x_
x^
x]
x\
bx [
bz Z
xY
xX
xW
xV
xU
xT
xS
xR
bx Q
bz P
xO
bx N
bx M
xL
xK
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
x?
bx >
bx =
bx <
bx ;
bx :
b0 9
bx 8
bx 7
bx 6
bx 5
b0xxxxxxxxxxxxxxxx 4
bx 3
bx 2
b0xxxxxxxxxxxxxxxx00 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
0*
0)
0(
bx '
0&
0%
0$
x#
0"
0!
$end
#5000
b1000 5
b1000 y$
b1000 &%
b100 1
b100 z$
b100 7%
0e$
0o$
0[$
0Q$
0G$
0=$
03$
0)$
0}#
0s#
0i#
0_#
0U#
0K#
0A#
07#
0-#
0##
0w"
0m"
0c"
0Y"
0O"
0E"
0;"
01"
0'"
0{
0q
0g
0]
0S
b1 4
b1 "%
b1 5%
b1 6%
b0 7
b0 <
b0 G
b0 $%
0d$
0n$
0Z$
0P$
0F$
0<$
02$
0($
0|#
0r#
0h#
0^#
0T#
0J#
0@#
06#
0,#
0"#
0v"
0l"
0b"
0X"
0N"
0D"
0:"
00"
0&"
0z
0p
0f
0\
1R
b101 B
b101 E
b0 0
b0 +%
b0 .%
b1 4%
b1 8
b1011 {$
b0 -
b0 #%
b0 3%
b0 2%
b10 .
b10 =
b10 H
b10 1%
b10 0%
b0 *%
b0 )%
b100 3
b100 (%
b100 ,%
b101100010000000000000000000001 '
b101100010000000000000000000001 ~$
b100 6
b100 v$
b100 x$
b100 %%
b0 2
b0 w$
b0 }$
b0 -%
1!
#10000
1#
0h$
0g$
1f$
0^$
1a$
0]$
1\$
0T$
1W$
0S$
1R$
0J$
1M$
0I$
1H$
0@$
1C$
0?$
1>$
06$
19$
05$
14$
0,$
1/$
0+$
1*$
0"$
1%$
0!$
1~#
0v#
1y#
0u#
1t#
0l#
1o#
0k#
1j#
0b#
1e#
0a#
1`#
0X#
1[#
0W#
1V#
0N#
1Q#
0M#
1L#
0D#
1G#
0C#
1B#
0:#
1=#
09#
18#
00#
13#
0/#
1.#
0&#
1)#
0%#
1$#
0z"
1}"
0y"
1x"
0p"
1s"
0o"
1n"
0f"
1i"
0e"
1d"
0\"
1_"
0["
1Z"
0R"
1U"
0Q"
1P"
0H"
1K"
0G"
1F"
0>"
1A"
0="
1<"
04"
17"
03"
12"
0*"
1-"
0)"
1("
0~
1#"
0}
1|
0t
1w
0s
1r
0j
1m
0i
1h
0`
1c
0_
1^
0V
1Y
0U
1T
b1 I
1r$
0O
1q$
0p$
1k$
b0 /
b0 C
b0 /%
1X
1b
1l
1v
1""
1,"
16"
1@"
1J"
1T"
1^"
1h"
1r"
1|"
1(#
12#
1<#
1F#
1P#
1Z#
1d#
1n#
1x#
1$$
1.$
18$
1B$
1L$
1V$
1`$
1j$
0t$
1W
0a
0k
0u
0!"
0+"
05"
0?"
0I"
0S"
0]"
0g"
0q"
0{"
0'#
01#
0;#
0E#
0O#
0Y#
0c#
0m#
0w#
0#$
0-$
07$
0A$
0K$
0U$
0_$
0i$
0s$
b111111111111111111111111111111101 J
1o$
b0 >
b0 F
b0 N
0@
0?
b11 M
b11 Q
b11 [
b11 e
b11 o
b11 y
b11 %"
b11 /"
b11 9"
b11 C"
b11 M"
b11 W"
b11 a"
b11 k"
b11 u"
b11 !#
b11 +#
b11 5#
b11 ?#
b11 I#
b11 S#
b11 ]#
b11 g#
b11 q#
b11 {#
b11 '$
b11 1$
b11 ;$
b11 E$
b11 O$
b11 Y$
b11 c$
b11 m$
1L
0K
b111 A
b111 D
b1 7
b1 <
b1 G
b1 $%
b1011 ,
b1011 :
b1011 ;
1$
1%
1*
b10 +
b10 9
b10 |$
0!
1"
#15000
b0 /
b0 C
b0 /%
1#
b0 >
b0 F
b0 N
0m
0h$
0^$
0a$
0T$
0W$
0J$
0M$
0@$
0C$
06$
09$
0,$
0/$
0"$
0%$
0v#
0y#
0l#
0o#
0b#
0e#
0X#
0[#
0N#
0Q#
0D#
0G#
0:#
0=#
00#
03#
0&#
0)#
0z"
0}"
0p"
0s"
0f"
0i"
0\"
0_"
0R"
0U"
0H"
0K"
0>"
0A"
04"
07"
0*"
0-"
0~
0#"
0t
0w
0h
0g$
0f$
0]$
0\$
0S$
0R$
0I$
0H$
0?$
0>$
05$
04$
0+$
0*$
0!$
0~#
0u#
0t#
0k#
0j#
0a#
0`#
0W#
0V#
0M#
0L#
0C#
0B#
09#
08#
0/#
0.#
0%#
0$#
0y"
0x"
0o"
0n"
0e"
0d"
0["
0Z"
0Q"
0P"
0G"
0F"
0="
0<"
03"
02"
0)"
0("
0}
0|
0s
0r
0`
0c
0j$
0`$
0V$
0L$
0B$
08$
0.$
0$$
0x#
0n#
0d#
0Z#
0P#
0F#
0<#
02#
0(#
0|"
0r"
0h"
0^"
0T"
0J"
0@"
06"
0,"
0""
0v
0l
0b
0X
0_
0^
1j
b1001 I
0V
0Y
1e$
1[$
1Q$
1G$
1=$
13$
1)$
1}#
1s#
1i#
1_#
1U#
1K#
1A#
17#
1-#
1##
1w"
1m"
1c"
1Y"
1O"
1E"
1;"
11"
1'"
1{
1q
1g
1]
1S
1i
0U
b1 J
0T
b11111111111111111111111111111100 1
b11111111111111111111111111111100 z$
b11111111111111111111111111111100 7%
b11111111111111111111111111111111 7
b11111111111111111111111111111111 <
b11111111111111111111111111111111 G
b11111111111111111111111111111111 $%
1k
0W
b11111111111111111111111111111111 4
b11111111111111111111111111111111 "%
b11111111111111111111111111111111 5%
b11111111111111111111111111111111 6%
1f
0R
b10 0
b10 +%
b10 .%
b1111111111111111 4%
b111111 8
b10 -
b10 #%
b10 3%
b10 2%
b1000 .
b1000 =
b1000 H
b1000 1%
b1000 0%
b11111 *%
b10 )%
b1000 3
b1000 (%
b1000 ,%
b101101000000101111111111111111 '
b101101000000101111111111111111 ~$
b100 5
b100 y$
b100 &%
b1000 6
b1000 v$
b1000 x$
b1000 %%
b100 2
b100 w$
b100 }$
b100 -%
1!
#20000
0!
#25000
1a$
1W$
1M$
1C$
19$
1/$
1%$
1y#
1o#
1e#
1[#
1Q#
1G#
1=#
13#
1)#
1}"
1s"
1i"
1_"
1U"
1K"
1A"
17"
1-"
1#"
1w
1j
1m
1c
1f$
1\$
1R$
1H$
1>$
14$
1*$
1~#
1t#
1j#
1`#
1V#
1L#
1B#
18#
1.#
1$#
1x"
1n"
1d"
1Z"
1P"
1F"
1<"
12"
1("
1|
1r
1i
1h
1^
1Y
b1 /
b1 C
b1 /%
1j$
1`$
1V$
1L$
1B$
18$
1.$
1$$
1x#
1n#
1d#
1Z#
1P#
1F#
1<#
12#
1(#
1|"
1r"
1h"
1^"
1T"
1J"
1@"
16"
1,"
1""
1v
1l
1b
1T
0#
b1 >
b1 F
b1 N
1h$
0r$
1O
1^$
1T$
1J$
1@$
16$
1,$
1"$
1v#
1l#
1b#
1X#
1N#
1D#
1:#
10#
1&#
1z"
1p"
1f"
1\"
1R"
1H"
1>"
14"
1*"
1~
1t
1`
b11111111111111111111111111111100 I
0V
0e$
0[$
0Q$
0G$
0=$
03$
0)$
0}#
0s#
0i#
0_#
0U#
0K#
0A#
07#
0-#
0##
0w"
0m"
0c"
0Y"
0O"
0E"
0;"
01"
0'"
0{
0q
0g
0]
1g$
0q$
b111111111111111111111111111111111 J
1p$
1]$
1S$
1I$
1?$
15$
1+$
1!$
1u#
1k#
1a#
1W#
1M#
1C#
19#
1/#
1%#
1y"
1o"
1e"
1["
1Q"
1G"
1="
13"
1)"
1}
1s
1_
0U
b1100 1
b1100 z$
b1100 7%
b11 7
b11 <
b11 G
b11 $%
1i$
1s$
1_$
1U$
1K$
1A$
17$
1-$
1#$
1w#
1m#
1c#
1Y#
1O#
1E#
1;#
11#
1'#
1{"
1q"
1g"
1]"
1S"
1I"
1?"
15"
1+"
1!"
1u
1a
1W
b11 4
b11 "%
b11 5%
b11 6%
1d$
1n$
1Z$
1P$
1F$
1<$
12$
1($
1|#
1r#
1h#
1^#
1T#
1J#
1@#
16#
1,#
1"#
1v"
1l"
1b"
1X"
1N"
1D"
1:"
10"
1&"
1z
1p
1\
1R
b11 0
b11 +%
b11 .%
b11 4%
b11 8
b11 2%
b11111111111111111111111111111111 .
b11111111111111111111111111111111 =
b11111111111111111111111111111111 H
b11111111111111111111111111111111 1%
b1010 0%
b0 *%
b11 )%
b1100 3
b1100 (%
b1100 ,%
b101101010000110000000000000011 '
b101101010000110000000000000011 ~$
b11000 5
b11000 y$
b11000 &%
b1100 6
b1100 v$
b1100 x$
b1100 %%
b1000 2
b1000 w$
b1000 }$
b1000 -%
b11 -
b11 #%
b11 3%
1!
#30000
0!
#35000
1f$
1a$
1\$
1W$
1R$
1M$
1H$
1C$
1>$
19$
14$
1/$
1*$
1%$
1~#
1y#
1t#
1o#
1j#
1e#
1`#
1[#
1V#
1Q#
1L#
1G#
1B#
1=#
18#
13#
1.#
1)#
1$#
1}"
1x"
1s"
1n"
1i"
1d"
1_"
1Z"
1U"
1P"
1K"
1F"
1A"
1<"
17"
12"
1-"
1("
1#"
1|
1w
1r
1m
1h
b0 /
b0 C
b0 /%
1c
1t$
1X
1#
b0 >
b0 F
b0 N
1^
0h$
0r$
1O
0^$
0T$
0J$
0@$
06$
0,$
0"$
0v#
0l#
0b#
0X#
0N#
0D#
0:#
00#
0&#
0z"
0p"
0f"
0\"
0R"
0H"
0>"
04"
0*"
0~
0t
0j
0`
b0 I
0V
1Y
0o$
0S
0g$
0q$
1p$
0]$
0S$
0I$
0?$
05$
0+$
0!$
0u#
0k#
0a#
0W#
0M#
0C#
09#
0/#
0%#
0y"
0o"
0e"
0["
0Q"
0G"
0="
03"
0)"
0}
0s
0i
0_
0U
b111111111111111111111111111111111 J
1T
b0 1
b0 z$
b0 7%
b0 7
b0 <
b0 G
b0 $%
0i$
0s$
0_$
0U$
0K$
0A$
07$
0-$
0#$
0w#
0m#
0c#
0Y#
0O#
0E#
0;#
01#
0'#
0{"
0q"
0g"
0]"
0S"
0I"
0?"
05"
0+"
0!"
0u
0k
0a
0W
b0 4
b0 "%
b0 5%
b0 6%
0$
0*
b0 +
b0 9
b0 |$
1&
0d$
0n$
0Z$
0P$
0F$
0<$
02$
0($
0|#
0r#
0h#
0^#
0T#
0J#
0@#
06#
0,#
0"#
0v"
0l"
0b"
0X"
0N"
0D"
0:"
00"
0&"
0z
0p
0f
0\
0R
b0 0
b0 +%
b0 .%
b0 4%
b0 8
b0 {$
b0 2%
b0 .
b0 =
b0 H
b0 1%
b0 0%
b0 )%
b10000 3
b10000 (%
b10000 ,%
b0 '
b0 ~$
b10000 5
b10000 y$
b10000 &%
b10000 6
b10000 v$
b10000 x$
b10000 %%
b1100 2
b1100 w$
b1100 }$
b1100 -%
b0 -
b0 #%
b0 3%
1!
#40000
0!
#45000
b10100 3
b10100 (%
b10100 ,%
b10100 5
b10100 y$
b10100 &%
b10100 6
b10100 v$
b10100 x$
b10100 %%
b10000 2
b10000 w$
b10000 }$
b10000 -%
1!
