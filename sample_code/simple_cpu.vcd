$date
	Wed May 13 11:42:23 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # zero $end
$var wire 1 $ sign $end
$var wire 1 % reg_write $end
$var wire 1 & reg_dst $end
$var wire 32 ' instruction [31:0] $end
$var wire 1 ( branch_eq $end
$var wire 1 ) branch $end
$var wire 1 * alu_src2 $end
$var wire 1 + alu_src1 $end
$var wire 4 , alu_op [3:0] $end
$var wire 4 - alu_ctrl [3:0] $end
$var wire 32 . RTdata [31:0] $end
$var wire 32 / RSdata [31:0] $end
$var wire 32 0 RDdata [31:0] $end
$var wire 5 1 RD_addr [4:0] $end
$var wire 32 2 ProgramCounter_w [31:0] $end
$var wire 32 3 ProgramCounter_o [31:0] $end
$var wire 32 4 ProgramCounter_i [31:0] $end
$var wire 32 5 ProgramCounter_b [31:0] $end
$var wire 32 6 ProgramCounter_4w [31:0] $end
$var wire 32 7 ProgramCounter_4 [31:0] $end
$var wire 32 8 Mux_Alu_src2 [31:0] $end
$var wire 32 9 Mux_Alu_src1 [31:0] $end
$scope module AC $end
$var wire 6 : funct_i [5:0] $end
$var wire 4 ; ALUOp_i [3:0] $end
$var reg 4 < ALUCtrl_o [3:0] $end
$var reg 1 + Mux_ALU_src1 $end
$var reg 1 $ Sign_extend_o $end
$upscope $end
$scope module ALU $end
$var wire 4 = ctrl_i [3:0] $end
$var wire 1 " rst_n $end
$var wire 1 # zero_o $end
$var wire 32 > src2_i [31:0] $end
$var wire 32 ? src1_i [31:0] $end
$var wire 32 @ result_out [31:0] $end
$var wire 1 A overflow_out $end
$var wire 1 B cout_out $end
$var reg 4 C ALU_Ctrl [3:0] $end
$var reg 3 D comp [2:0] $end
$var reg 32 E result_o [31:0] $end
$scope module alu $end
$var wire 4 F ALU_control [3:0] $end
$var wire 3 G comp [2:0] $end
$var wire 32 H result [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 I src2 [31:0] $end
$var wire 32 J src1 [31:0] $end
$var wire 32 K result_wire [31:0] $end
$var wire 33 L carry [32:0] $end
$var reg 1 M A_invert $end
$var reg 1 N B_invert $end
$var reg 1 B cout $end
$var reg 2 O operation [1:0] $end
$var reg 1 A overflow $end
$var reg 32 P result_reg [31:0] $end
$var reg 1 # zero $end
$scope begin genblk1[1] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 Q cin $end
$var wire 3 R comp [2:0] $end
$var wire 2 S operation [1:0] $end
$var wire 1 T src1 $end
$var wire 1 U src2 $end
$var wire 1 V cout $end
$var wire 1 W add_result $end
$var reg 1 X result $end
$scope module add_part $end
$var wire 1 Y A $end
$var wire 1 Z B $end
$var wire 1 Q CIN $end
$var wire 1 W SUM $end
$var wire 1 V COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 [ cin $end
$var wire 3 \ comp [2:0] $end
$var wire 2 ] operation [1:0] $end
$var wire 1 ^ src1 $end
$var wire 1 _ src2 $end
$var wire 1 ` cout $end
$var wire 1 a add_result $end
$var reg 1 b result $end
$scope module add_part $end
$var wire 1 c A $end
$var wire 1 d B $end
$var wire 1 [ CIN $end
$var wire 1 a SUM $end
$var wire 1 ` COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 e cin $end
$var wire 3 f comp [2:0] $end
$var wire 2 g operation [1:0] $end
$var wire 1 h src1 $end
$var wire 1 i src2 $end
$var wire 1 j cout $end
$var wire 1 k add_result $end
$var reg 1 l result $end
$scope module add_part $end
$var wire 1 m A $end
$var wire 1 n B $end
$var wire 1 e CIN $end
$var wire 1 k SUM $end
$var wire 1 j COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 o cin $end
$var wire 3 p comp [2:0] $end
$var wire 2 q operation [1:0] $end
$var wire 1 r src1 $end
$var wire 1 s src2 $end
$var wire 1 t cout $end
$var wire 1 u add_result $end
$var reg 1 v result $end
$scope module add_part $end
$var wire 1 w A $end
$var wire 1 x B $end
$var wire 1 o CIN $end
$var wire 1 u SUM $end
$var wire 1 t COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 y cin $end
$var wire 3 z comp [2:0] $end
$var wire 2 { operation [1:0] $end
$var wire 1 | src1 $end
$var wire 1 } src2 $end
$var wire 1 ~ cout $end
$var wire 1 !" add_result $end
$var reg 1 "" result $end
$scope module add_part $end
$var wire 1 #" A $end
$var wire 1 $" B $end
$var wire 1 y CIN $end
$var wire 1 !" SUM $end
$var wire 1 ~ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 %" cin $end
$var wire 3 &" comp [2:0] $end
$var wire 2 '" operation [1:0] $end
$var wire 1 (" src1 $end
$var wire 1 )" src2 $end
$var wire 1 *" cout $end
$var wire 1 +" add_result $end
$var reg 1 ," result $end
$scope module add_part $end
$var wire 1 -" A $end
$var wire 1 ." B $end
$var wire 1 %" CIN $end
$var wire 1 +" SUM $end
$var wire 1 *" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 /" cin $end
$var wire 3 0" comp [2:0] $end
$var wire 2 1" operation [1:0] $end
$var wire 1 2" src1 $end
$var wire 1 3" src2 $end
$var wire 1 4" cout $end
$var wire 1 5" add_result $end
$var reg 1 6" result $end
$scope module add_part $end
$var wire 1 7" A $end
$var wire 1 8" B $end
$var wire 1 /" CIN $end
$var wire 1 5" SUM $end
$var wire 1 4" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 9" cin $end
$var wire 3 :" comp [2:0] $end
$var wire 2 ;" operation [1:0] $end
$var wire 1 <" src1 $end
$var wire 1 =" src2 $end
$var wire 1 >" cout $end
$var wire 1 ?" add_result $end
$var reg 1 @" result $end
$scope module add_part $end
$var wire 1 A" A $end
$var wire 1 B" B $end
$var wire 1 9" CIN $end
$var wire 1 ?" SUM $end
$var wire 1 >" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 C" cin $end
$var wire 3 D" comp [2:0] $end
$var wire 2 E" operation [1:0] $end
$var wire 1 F" src1 $end
$var wire 1 G" src2 $end
$var wire 1 H" cout $end
$var wire 1 I" add_result $end
$var reg 1 J" result $end
$scope module add_part $end
$var wire 1 K" A $end
$var wire 1 L" B $end
$var wire 1 C" CIN $end
$var wire 1 I" SUM $end
$var wire 1 H" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 M" cin $end
$var wire 3 N" comp [2:0] $end
$var wire 2 O" operation [1:0] $end
$var wire 1 P" src1 $end
$var wire 1 Q" src2 $end
$var wire 1 R" cout $end
$var wire 1 S" add_result $end
$var reg 1 T" result $end
$scope module add_part $end
$var wire 1 U" A $end
$var wire 1 V" B $end
$var wire 1 M" CIN $end
$var wire 1 S" SUM $end
$var wire 1 R" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 W" cin $end
$var wire 3 X" comp [2:0] $end
$var wire 2 Y" operation [1:0] $end
$var wire 1 Z" src1 $end
$var wire 1 [" src2 $end
$var wire 1 \" cout $end
$var wire 1 ]" add_result $end
$var reg 1 ^" result $end
$scope module add_part $end
$var wire 1 _" A $end
$var wire 1 `" B $end
$var wire 1 W" CIN $end
$var wire 1 ]" SUM $end
$var wire 1 \" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 a" cin $end
$var wire 3 b" comp [2:0] $end
$var wire 2 c" operation [1:0] $end
$var wire 1 d" src1 $end
$var wire 1 e" src2 $end
$var wire 1 f" cout $end
$var wire 1 g" add_result $end
$var reg 1 h" result $end
$scope module add_part $end
$var wire 1 i" A $end
$var wire 1 j" B $end
$var wire 1 a" CIN $end
$var wire 1 g" SUM $end
$var wire 1 f" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 k" cin $end
$var wire 3 l" comp [2:0] $end
$var wire 2 m" operation [1:0] $end
$var wire 1 n" src1 $end
$var wire 1 o" src2 $end
$var wire 1 p" cout $end
$var wire 1 q" add_result $end
$var reg 1 r" result $end
$scope module add_part $end
$var wire 1 s" A $end
$var wire 1 t" B $end
$var wire 1 k" CIN $end
$var wire 1 q" SUM $end
$var wire 1 p" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 u" cin $end
$var wire 3 v" comp [2:0] $end
$var wire 2 w" operation [1:0] $end
$var wire 1 x" src1 $end
$var wire 1 y" src2 $end
$var wire 1 z" cout $end
$var wire 1 {" add_result $end
$var reg 1 |" result $end
$scope module add_part $end
$var wire 1 }" A $end
$var wire 1 ~" B $end
$var wire 1 u" CIN $end
$var wire 1 {" SUM $end
$var wire 1 z" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 !# cin $end
$var wire 3 "# comp [2:0] $end
$var wire 2 ## operation [1:0] $end
$var wire 1 $# src1 $end
$var wire 1 %# src2 $end
$var wire 1 &# cout $end
$var wire 1 '# add_result $end
$var reg 1 (# result $end
$scope module add_part $end
$var wire 1 )# A $end
$var wire 1 *# B $end
$var wire 1 !# CIN $end
$var wire 1 '# SUM $end
$var wire 1 &# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 +# cin $end
$var wire 3 ,# comp [2:0] $end
$var wire 2 -# operation [1:0] $end
$var wire 1 .# src1 $end
$var wire 1 /# src2 $end
$var wire 1 0# cout $end
$var wire 1 1# add_result $end
$var reg 1 2# result $end
$scope module add_part $end
$var wire 1 3# A $end
$var wire 1 4# B $end
$var wire 1 +# CIN $end
$var wire 1 1# SUM $end
$var wire 1 0# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 5# cin $end
$var wire 3 6# comp [2:0] $end
$var wire 2 7# operation [1:0] $end
$var wire 1 8# src1 $end
$var wire 1 9# src2 $end
$var wire 1 :# cout $end
$var wire 1 ;# add_result $end
$var reg 1 <# result $end
$scope module add_part $end
$var wire 1 =# A $end
$var wire 1 ># B $end
$var wire 1 5# CIN $end
$var wire 1 ;# SUM $end
$var wire 1 :# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 ?# cin $end
$var wire 3 @# comp [2:0] $end
$var wire 2 A# operation [1:0] $end
$var wire 1 B# src1 $end
$var wire 1 C# src2 $end
$var wire 1 D# cout $end
$var wire 1 E# add_result $end
$var reg 1 F# result $end
$scope module add_part $end
$var wire 1 G# A $end
$var wire 1 H# B $end
$var wire 1 ?# CIN $end
$var wire 1 E# SUM $end
$var wire 1 D# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 I# cin $end
$var wire 3 J# comp [2:0] $end
$var wire 2 K# operation [1:0] $end
$var wire 1 L# src1 $end
$var wire 1 M# src2 $end
$var wire 1 N# cout $end
$var wire 1 O# add_result $end
$var reg 1 P# result $end
$scope module add_part $end
$var wire 1 Q# A $end
$var wire 1 R# B $end
$var wire 1 I# CIN $end
$var wire 1 O# SUM $end
$var wire 1 N# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 S# cin $end
$var wire 3 T# comp [2:0] $end
$var wire 2 U# operation [1:0] $end
$var wire 1 V# src1 $end
$var wire 1 W# src2 $end
$var wire 1 X# cout $end
$var wire 1 Y# add_result $end
$var reg 1 Z# result $end
$scope module add_part $end
$var wire 1 [# A $end
$var wire 1 \# B $end
$var wire 1 S# CIN $end
$var wire 1 Y# SUM $end
$var wire 1 X# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 ]# cin $end
$var wire 3 ^# comp [2:0] $end
$var wire 2 _# operation [1:0] $end
$var wire 1 `# src1 $end
$var wire 1 a# src2 $end
$var wire 1 b# cout $end
$var wire 1 c# add_result $end
$var reg 1 d# result $end
$scope module add_part $end
$var wire 1 e# A $end
$var wire 1 f# B $end
$var wire 1 ]# CIN $end
$var wire 1 c# SUM $end
$var wire 1 b# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 g# cin $end
$var wire 3 h# comp [2:0] $end
$var wire 2 i# operation [1:0] $end
$var wire 1 j# src1 $end
$var wire 1 k# src2 $end
$var wire 1 l# cout $end
$var wire 1 m# add_result $end
$var reg 1 n# result $end
$scope module add_part $end
$var wire 1 o# A $end
$var wire 1 p# B $end
$var wire 1 g# CIN $end
$var wire 1 m# SUM $end
$var wire 1 l# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 q# cin $end
$var wire 3 r# comp [2:0] $end
$var wire 2 s# operation [1:0] $end
$var wire 1 t# src1 $end
$var wire 1 u# src2 $end
$var wire 1 v# cout $end
$var wire 1 w# add_result $end
$var reg 1 x# result $end
$scope module add_part $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 q# CIN $end
$var wire 1 w# SUM $end
$var wire 1 v# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 {# cin $end
$var wire 3 |# comp [2:0] $end
$var wire 2 }# operation [1:0] $end
$var wire 1 ~# src1 $end
$var wire 1 !$ src2 $end
$var wire 1 "$ cout $end
$var wire 1 #$ add_result $end
$var reg 1 $$ result $end
$scope module add_part $end
$var wire 1 %$ A $end
$var wire 1 &$ B $end
$var wire 1 {# CIN $end
$var wire 1 #$ SUM $end
$var wire 1 "$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 '$ cin $end
$var wire 3 ($ comp [2:0] $end
$var wire 2 )$ operation [1:0] $end
$var wire 1 *$ src1 $end
$var wire 1 +$ src2 $end
$var wire 1 ,$ cout $end
$var wire 1 -$ add_result $end
$var reg 1 .$ result $end
$scope module add_part $end
$var wire 1 /$ A $end
$var wire 1 0$ B $end
$var wire 1 '$ CIN $end
$var wire 1 -$ SUM $end
$var wire 1 ,$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 1$ cin $end
$var wire 3 2$ comp [2:0] $end
$var wire 2 3$ operation [1:0] $end
$var wire 1 4$ src1 $end
$var wire 1 5$ src2 $end
$var wire 1 6$ cout $end
$var wire 1 7$ add_result $end
$var reg 1 8$ result $end
$scope module add_part $end
$var wire 1 9$ A $end
$var wire 1 :$ B $end
$var wire 1 1$ CIN $end
$var wire 1 7$ SUM $end
$var wire 1 6$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 ;$ cin $end
$var wire 3 <$ comp [2:0] $end
$var wire 2 =$ operation [1:0] $end
$var wire 1 >$ src1 $end
$var wire 1 ?$ src2 $end
$var wire 1 @$ cout $end
$var wire 1 A$ add_result $end
$var reg 1 B$ result $end
$scope module add_part $end
$var wire 1 C$ A $end
$var wire 1 D$ B $end
$var wire 1 ;$ CIN $end
$var wire 1 A$ SUM $end
$var wire 1 @$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 E$ cin $end
$var wire 3 F$ comp [2:0] $end
$var wire 2 G$ operation [1:0] $end
$var wire 1 H$ src1 $end
$var wire 1 I$ src2 $end
$var wire 1 J$ cout $end
$var wire 1 K$ add_result $end
$var reg 1 L$ result $end
$scope module add_part $end
$var wire 1 M$ A $end
$var wire 1 N$ B $end
$var wire 1 E$ CIN $end
$var wire 1 K$ SUM $end
$var wire 1 J$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 O$ cin $end
$var wire 3 P$ comp [2:0] $end
$var wire 2 Q$ operation [1:0] $end
$var wire 1 R$ src1 $end
$var wire 1 S$ src2 $end
$var wire 1 T$ cout $end
$var wire 1 U$ add_result $end
$var reg 1 V$ result $end
$scope module add_part $end
$var wire 1 W$ A $end
$var wire 1 X$ B $end
$var wire 1 O$ CIN $end
$var wire 1 U$ SUM $end
$var wire 1 T$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module a $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 Y$ cin $end
$var wire 3 Z$ comp [2:0] $end
$var wire 2 [$ operation [1:0] $end
$var wire 1 \$ src1 $end
$var wire 1 ]$ src2 $end
$var wire 1 ^$ cout $end
$var wire 1 _$ add_result $end
$var reg 1 `$ result $end
$scope module add_part $end
$var wire 1 a$ A $end
$var wire 1 b$ B $end
$var wire 1 Y$ CIN $end
$var wire 1 _$ SUM $end
$var wire 1 ^$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope module last $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 c$ cin $end
$var wire 1 d$ equal_in $end
$var wire 2 e$ operation [1:0] $end
$var wire 1 f$ src1 $end
$var wire 1 g$ src2 $end
$var wire 1 h$ cout $end
$var wire 1 i$ add_result $end
$var reg 1 j$ result $end
$scope module add_part $end
$var wire 1 k$ A $end
$var wire 1 l$ B $end
$var wire 1 c$ CIN $end
$var wire 1 i$ SUM $end
$var wire 1 h$ COUT $end
$upscope $end
$upscope $end
$scope module start $end
$var wire 1 M A_invert $end
$var wire 1 N B_invert $end
$var wire 1 m$ cin $end
$var wire 3 n$ comp [2:0] $end
$var wire 2 o$ operation [1:0] $end
$var wire 1 p$ src1 $end
$var wire 1 q$ src2 $end
$var wire 1 r$ cout $end
$var wire 1 s$ add_result $end
$var reg 1 t$ result $end
$scope module add_part $end
$var wire 1 u$ A $end
$var wire 1 v$ B $end
$var wire 1 m$ CIN $end
$var wire 1 s$ SUM $end
$var wire 1 r$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 w$ src2_i [31:0] $end
$var wire 32 x$ sum_o [31:0] $end
$var wire 32 y$ src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 z$ src2_i [31:0] $end
$var wire 32 {$ sum_o [31:0] $end
$var wire 32 |$ src1_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 }$ instr_op_i [5:0] $end
$var wire 1 " rst_n $end
$var reg 1 * ALUSrc_o $end
$var reg 4 ~$ ALU_op_o [3:0] $end
$var reg 1 ( Branch_eq $end
$var reg 1 ) Branch_o $end
$var reg 1 & RegDst_o $end
$var reg 1 % RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 !% pc_addr_i [31:0] $end
$var reg 32 "% instr_o [31:0] $end
$var integer 32 #% i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc1 $end
$var wire 1 + select_i $end
$var wire 32 $% data1_i [31:0] $end
$var wire 32 %% data0_i [31:0] $end
$var reg 32 &% data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc2 $end
$var wire 1 * select_i $end
$var wire 32 '% data1_i [31:0] $end
$var wire 32 (% data0_i [31:0] $end
$var reg 32 )% data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 *% data0_i [31:0] $end
$var wire 32 +% data1_i [31:0] $end
$var wire 1 ,% select_i $end
$var reg 32 -% data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 .% data0_i [4:0] $end
$var wire 5 /% data1_i [4:0] $end
$var wire 1 & select_i $end
$var reg 5 0% data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 1% pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 2% pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 3% RDaddr_i [4:0] $end
$var wire 32 4% RDdata_i [31:0] $end
$var wire 5 5% RSaddr_i [4:0] $end
$var wire 32 6% RSdata_o [31:0] $end
$var wire 5 7% RTaddr_i [4:0] $end
$var wire 32 8% RTdata_o [31:0] $end
$var wire 1 % RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 9% data_i [15:0] $end
$var wire 1 $ sign_i $end
$var reg 32 :% data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 ;% data_i [31:0] $end
$var wire 32 <% data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxx00 <%
b0xxxxxxxxxxxxxxxx ;%
b0xxxxxxxxxxxxxxxx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
0,%
bx +%
bx *%
bx )%
bx (%
b0xxxxxxxxxxxxxxxx '%
bx &%
bx %%
b0xxxxxxxxxxxxxxxx $%
b100000 #%
bx "%
bx !%
b0 ~$
bx }$
b0xxxxxxxxxxxxxxxx00 |$
bx {$
bx z$
bx y$
bx x$
b100 w$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
bx o$
bz n$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
bx e$
zd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
bx [$
bz Z$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
bx Q$
bz P$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
bx G$
bz F$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
bx =$
bz <$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
bx 3$
bz 2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
bx )$
bz ($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
bx }#
bz |#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
bx s#
bz r#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
bx i#
bz h#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
bx _#
bz ^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
bx U#
bz T#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
bx K#
bz J#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
bx A#
bz @#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
bx 7#
bz 6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
bx -#
bz ,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
bx ##
bz "#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
bx w"
bz v"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
bx m"
bz l"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
bx c"
bz b"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
bx Y"
bz X"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
bx O"
bz N"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
bx E"
bz D"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
bx ;"
bz :"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
bx 1"
bz 0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
bx '"
bz &"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
bx {
bz z
xy
xx
xw
xv
xu
xt
xs
xr
bx q
bz p
xo
xn
xm
xl
xk
xj
xi
xh
bx g
bz f
xe
xd
xc
xb
xa
x`
x_
x^
bx ]
bz \
x[
xZ
xY
xX
xW
xV
xU
xT
bx S
bz R
xQ
bx P
bx O
xN
xM
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
xB
xA
bx @
bx ?
bx >
bx =
bx <
b0 ;
bx :
bx 9
bx 8
bx 7
bx 6
b0xxxxxxxxxxxxxxxx 5
bx 4
bx 3
b0xxxxxxxxxxxxxxxx00 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
x+
0*
0)
0(
bx '
0&
0%
0$
x#
0"
0!
$end
#5000
b100000000100000 6
b100000000100000 {$
b100000000100000 +%
b100000000011100 2
b100000000011100 |$
b100000000011100 <%
0g$
1q$
0]$
0S$
0I$
0?$
05$
0+$
0!$
0u#
0k#
0a#
0W#
0M#
0C#
09#
0/#
0%#
0y"
0o"
0e"
0["
0Q"
0G"
0="
03"
0)"
0}
0s
0i
0_
1U
0f$
1p$
0\$
0R$
0H$
0>$
04$
0*$
0~#
0t#
0j#
0`#
0V#
0L#
0B#
08#
0.#
0$#
0x"
0n"
0d"
0Z"
0P"
0F"
0<"
02"
0("
0|
0r
0h
0^
1T
b0 0
b0 E
b0 4%
b101 D
b101 G
b1000000000111 5
b1000000000111 $%
b1000000000111 '%
b1000000000111 :%
b1000000000111 ;%
b1001 -
b1001 <
b1001 =
0+
b11 8
b11 >
b11 I
b11 )%
b11 9
b11 ?
b11 J
b11 &%
b11 1
b11 0%
b11 3%
b1000000000111 9%
b111 :
b0 }$
b11 .
b11 (%
b11 8%
b11 7%
b11 /
b11 %%
b11 6%
b11 5%
b10 /%
b11 .%
b100 4
b100 -%
b100 1%
b11000110001000000000111 '
b11000110001000000000111 "%
b100 7
b100 x$
b100 z$
b100 *%
b0 3
b0 y$
b0 !%
b0 2%
1!
#10000
b10 1
b10 0%
b10 3%
1%
1&
0!
1"
#15000
xd
xY
b10000000000011100 2
b10000000000011100 |$
b10000000000011100 <%
1_
0T
b1 0
b1 E
b1 4%
b100000000000111 5
b100000000000111 $%
b100000000000111 '%
b100000000000111 :%
b100000000000111 ;%
b111 8
b111 >
b111 I
b111 )%
b1 9
b1 ?
b1 J
b1 &%
b1000 1
b1000 0%
b1000 3%
b100000000000111 9%
b111 .
b111 (%
b111 8%
b111 7%
b1 /
b1 %%
b1 6%
b1 5%
b1000 /%
b111 .%
b1000 4
b1000 -%
b1000 1%
b1001110100000000000111 '
b1001110100000000000111 "%
b10000000000100100 6
b10000000000100100 {$
b10000000000100100 +%
b1000 7
b1000 x$
b1000 z$
b1000 *%
b100 3
b100 y$
b100 !%
b100 2%
1!
#20000
0!
#25000
xl$
xv$
xb$
xX$
xN$
xD$
x:$
x0$
x&$
xz#
xp#
xf#
x\#
xR#
xH#
x>#
x4#
x*#
x~"
xt"
xj"
x`"
xV"
xL"
xB"
x8"
x."
x$"
xx
xn
xY
b1100000000011100 2
b1100000000011100 |$
b1100000000011100 <%
1g$
0q$
1]$
1S$
1I$
1?$
15$
1+$
1!$
1u#
1k#
1a#
1W#
1M#
1C#
19#
1/#
1%#
1y"
1o"
1e"
1["
1Q"
1G"
1="
13"
1)"
1}
1s
1i
1T
b11000000000111 5
b11000000000111 $%
b11000000000111 '%
b11000000000111 :%
b11000000000111 ;%
b11111111111111111111111111111110 8
b11111111111111111111111111111110 >
b11111111111111111111111111111110 I
b11111111111111111111111111111110 )%
b11 9
b11 ?
b11 J
b11 &%
b110 1
b110 0%
b110 3%
b11000000000111 9%
b11111111111111111111111111111110 .
b11111111111111111111111111111110 (%
b11111111111111111111111111111110 8%
b1011 7%
b11 /
b11 %%
b11 6%
b11 5%
b110 /%
b1011 .%
b1100 4
b1100 -%
b1100 1%
b11010110011000000000111 '
b11010110011000000000111 "%
b1100000000101000 6
b1100000000101000 {$
b1100000000101000 +%
b1100 7
b1100 x$
b1100 z$
b1100 *%
b1000 3
b1000 y$
b1000 !%
b1000 2%
1!
#30000
0!
#35000
xl$
xb$
xX$
xN$
xD$
x:$
x0$
x&$
xz#
xp#
xf#
x\#
xR#
xH#
x>#
x4#
x*#
x~"
xt"
xj"
x`"
xV"
xL"
xB"
x8"
x."
x$"
xx
xn
xd
xZ
xu$
xY
b0 2
b0 |$
b0 <%
0g$
0]$
0S$
0I$
0?$
05$
0+$
0!$
0u#
0k#
0a#
0W#
0M#
0C#
09#
0/#
0%#
0y"
0o"
0e"
0["
0Q"
0G"
0="
03"
0)"
0}
0s
0i
0_
0U
0p$
0T
b0 0
b0 E
b0 4%
b0 5
b0 $%
b0 '%
b0 :%
b0 ;%
b0 8
b0 >
b0 I
b0 )%
b0 9
b0 ?
b0 J
b0 &%
b0 1
b0 0%
b0 3%
b0 9%
b0 :
b0 .
b0 (%
b0 8%
b0 7%
b0 /
b0 %%
b0 6%
b0 5%
b0 /%
b0 .%
b10000 4
b10000 -%
b10000 1%
b0 '
b0 "%
b10000 6
b10000 {$
b10000 +%
b10000 7
b10000 x$
b10000 z$
b10000 *%
b1100 3
b1100 y$
b1100 !%
b1100 2%
1!
#40000
0!
#45000
b10100 4
b10100 -%
b10100 1%
b10100 6
b10100 {$
b10100 +%
b10100 7
b10100 x$
b10100 z$
b10100 *%
b10000 3
b10000 y$
b10000 !%
b10000 2%
1!
