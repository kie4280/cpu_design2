$date
	Wed May 13 00:05:10 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # sign $end
$var wire 1 $ zero $end
$var wire 1 % reg_write $end
$var wire 1 & reg_dst $end
$var wire 32 ' instruction [31:0] $end
$var wire 1 ( branch_eq $end
$var wire 1 ) branch $end
$var wire 1 * alu_src $end
$var wire 3 + alu_op [2:0] $end
$var wire 4 , alu_ctrl [3:0] $end
$var wire 32 - RTdata [31:0] $end
$var wire 32 . RSdata [31:0] $end
$var wire 32 / RDdata [31:0] $end
$var wire 5 0 RD_addr [4:0] $end
$var wire 32 1 ProgramCounter_w [31:0] $end
$var wire 32 2 ProgramCounter_o [31:0] $end
$var wire 32 3 ProgramCounter_i [31:0] $end
$var wire 32 4 ProgramCounter_b [31:0] $end
$var wire 32 5 ProgramCounter_4w [31:0] $end
$var wire 32 6 ProgramCounter_4 [31:0] $end
$var wire 32 7 Mux_ALU [31:0] $end
$scope module AC $end
$var wire 6 8 funct_i [5:0] $end
$var wire 3 9 ALUOp_i [2:0] $end
$var reg 4 : ALUCtrl_o [3:0] $end
$var reg 1 ; Sign_extend_o $end
$upscope $end
$scope module ALU $end
$var wire 4 < ctrl_i [3:0] $end
$var wire 1 " rst_n $end
$var wire 1 $ zero_o $end
$var wire 32 = src2_i [31:0] $end
$var wire 32 > src1_i [31:0] $end
$var wire 32 ? result_out [31:0] $end
$var wire 1 @ overflow_out $end
$var wire 1 A cout_out $end
$var reg 4 B ALU_Ctrl [3:0] $end
$var reg 3 C comp [2:0] $end
$var reg 32 D result_o [31:0] $end
$scope module alu $end
$var wire 4 E ALU_control [3:0] $end
$var wire 3 F comp [2:0] $end
$var wire 32 G result [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 H src2 [31:0] $end
$var wire 32 I src1 [31:0] $end
$var wire 32 J result_wire [31:0] $end
$var wire 33 K carry [32:0] $end
$var reg 1 L A_invert $end
$var reg 1 M B_invert $end
$var reg 1 A cout $end
$var reg 2 N operation [1:0] $end
$var reg 1 @ overflow $end
$var reg 32 O result_reg [31:0] $end
$var reg 1 $ zero $end
$scope begin genblk1[1] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 P cin $end
$var wire 3 Q comp [2:0] $end
$var wire 2 R operation [1:0] $end
$var wire 1 S src1 $end
$var wire 1 T src2 $end
$var wire 1 U cout $end
$var wire 1 V add_result $end
$var reg 1 W result $end
$scope module add_part $end
$var wire 1 X A $end
$var wire 1 Y B $end
$var wire 1 P CIN $end
$var wire 1 V SUM $end
$var wire 1 U COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 Z cin $end
$var wire 3 [ comp [2:0] $end
$var wire 2 \ operation [1:0] $end
$var wire 1 ] src1 $end
$var wire 1 ^ src2 $end
$var wire 1 _ cout $end
$var wire 1 ` add_result $end
$var reg 1 a result $end
$scope module add_part $end
$var wire 1 b A $end
$var wire 1 c B $end
$var wire 1 Z CIN $end
$var wire 1 ` SUM $end
$var wire 1 _ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 d cin $end
$var wire 3 e comp [2:0] $end
$var wire 2 f operation [1:0] $end
$var wire 1 g src1 $end
$var wire 1 h src2 $end
$var wire 1 i cout $end
$var wire 1 j add_result $end
$var reg 1 k result $end
$scope module add_part $end
$var wire 1 l A $end
$var wire 1 m B $end
$var wire 1 d CIN $end
$var wire 1 j SUM $end
$var wire 1 i COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 n cin $end
$var wire 3 o comp [2:0] $end
$var wire 2 p operation [1:0] $end
$var wire 1 q src1 $end
$var wire 1 r src2 $end
$var wire 1 s cout $end
$var wire 1 t add_result $end
$var reg 1 u result $end
$scope module add_part $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 n CIN $end
$var wire 1 t SUM $end
$var wire 1 s COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 x cin $end
$var wire 3 y comp [2:0] $end
$var wire 2 z operation [1:0] $end
$var wire 1 { src1 $end
$var wire 1 | src2 $end
$var wire 1 } cout $end
$var wire 1 ~ add_result $end
$var reg 1 !" result $end
$scope module add_part $end
$var wire 1 "" A $end
$var wire 1 #" B $end
$var wire 1 x CIN $end
$var wire 1 ~ SUM $end
$var wire 1 } COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 $" cin $end
$var wire 3 %" comp [2:0] $end
$var wire 2 &" operation [1:0] $end
$var wire 1 '" src1 $end
$var wire 1 (" src2 $end
$var wire 1 )" cout $end
$var wire 1 *" add_result $end
$var reg 1 +" result $end
$scope module add_part $end
$var wire 1 ," A $end
$var wire 1 -" B $end
$var wire 1 $" CIN $end
$var wire 1 *" SUM $end
$var wire 1 )" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 ." cin $end
$var wire 3 /" comp [2:0] $end
$var wire 2 0" operation [1:0] $end
$var wire 1 1" src1 $end
$var wire 1 2" src2 $end
$var wire 1 3" cout $end
$var wire 1 4" add_result $end
$var reg 1 5" result $end
$scope module add_part $end
$var wire 1 6" A $end
$var wire 1 7" B $end
$var wire 1 ." CIN $end
$var wire 1 4" SUM $end
$var wire 1 3" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 8" cin $end
$var wire 3 9" comp [2:0] $end
$var wire 2 :" operation [1:0] $end
$var wire 1 ;" src1 $end
$var wire 1 <" src2 $end
$var wire 1 =" cout $end
$var wire 1 >" add_result $end
$var reg 1 ?" result $end
$scope module add_part $end
$var wire 1 @" A $end
$var wire 1 A" B $end
$var wire 1 8" CIN $end
$var wire 1 >" SUM $end
$var wire 1 =" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 B" cin $end
$var wire 3 C" comp [2:0] $end
$var wire 2 D" operation [1:0] $end
$var wire 1 E" src1 $end
$var wire 1 F" src2 $end
$var wire 1 G" cout $end
$var wire 1 H" add_result $end
$var reg 1 I" result $end
$scope module add_part $end
$var wire 1 J" A $end
$var wire 1 K" B $end
$var wire 1 B" CIN $end
$var wire 1 H" SUM $end
$var wire 1 G" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 L" cin $end
$var wire 3 M" comp [2:0] $end
$var wire 2 N" operation [1:0] $end
$var wire 1 O" src1 $end
$var wire 1 P" src2 $end
$var wire 1 Q" cout $end
$var wire 1 R" add_result $end
$var reg 1 S" result $end
$scope module add_part $end
$var wire 1 T" A $end
$var wire 1 U" B $end
$var wire 1 L" CIN $end
$var wire 1 R" SUM $end
$var wire 1 Q" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 V" cin $end
$var wire 3 W" comp [2:0] $end
$var wire 2 X" operation [1:0] $end
$var wire 1 Y" src1 $end
$var wire 1 Z" src2 $end
$var wire 1 [" cout $end
$var wire 1 \" add_result $end
$var reg 1 ]" result $end
$scope module add_part $end
$var wire 1 ^" A $end
$var wire 1 _" B $end
$var wire 1 V" CIN $end
$var wire 1 \" SUM $end
$var wire 1 [" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 `" cin $end
$var wire 3 a" comp [2:0] $end
$var wire 2 b" operation [1:0] $end
$var wire 1 c" src1 $end
$var wire 1 d" src2 $end
$var wire 1 e" cout $end
$var wire 1 f" add_result $end
$var reg 1 g" result $end
$scope module add_part $end
$var wire 1 h" A $end
$var wire 1 i" B $end
$var wire 1 `" CIN $end
$var wire 1 f" SUM $end
$var wire 1 e" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 j" cin $end
$var wire 3 k" comp [2:0] $end
$var wire 2 l" operation [1:0] $end
$var wire 1 m" src1 $end
$var wire 1 n" src2 $end
$var wire 1 o" cout $end
$var wire 1 p" add_result $end
$var reg 1 q" result $end
$scope module add_part $end
$var wire 1 r" A $end
$var wire 1 s" B $end
$var wire 1 j" CIN $end
$var wire 1 p" SUM $end
$var wire 1 o" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 t" cin $end
$var wire 3 u" comp [2:0] $end
$var wire 2 v" operation [1:0] $end
$var wire 1 w" src1 $end
$var wire 1 x" src2 $end
$var wire 1 y" cout $end
$var wire 1 z" add_result $end
$var reg 1 {" result $end
$scope module add_part $end
$var wire 1 |" A $end
$var wire 1 }" B $end
$var wire 1 t" CIN $end
$var wire 1 z" SUM $end
$var wire 1 y" COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 ~" cin $end
$var wire 3 !# comp [2:0] $end
$var wire 2 "# operation [1:0] $end
$var wire 1 ## src1 $end
$var wire 1 $# src2 $end
$var wire 1 %# cout $end
$var wire 1 &# add_result $end
$var reg 1 '# result $end
$scope module add_part $end
$var wire 1 (# A $end
$var wire 1 )# B $end
$var wire 1 ~" CIN $end
$var wire 1 &# SUM $end
$var wire 1 %# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 *# cin $end
$var wire 3 +# comp [2:0] $end
$var wire 2 ,# operation [1:0] $end
$var wire 1 -# src1 $end
$var wire 1 .# src2 $end
$var wire 1 /# cout $end
$var wire 1 0# add_result $end
$var reg 1 1# result $end
$scope module add_part $end
$var wire 1 2# A $end
$var wire 1 3# B $end
$var wire 1 *# CIN $end
$var wire 1 0# SUM $end
$var wire 1 /# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 4# cin $end
$var wire 3 5# comp [2:0] $end
$var wire 2 6# operation [1:0] $end
$var wire 1 7# src1 $end
$var wire 1 8# src2 $end
$var wire 1 9# cout $end
$var wire 1 :# add_result $end
$var reg 1 ;# result $end
$scope module add_part $end
$var wire 1 <# A $end
$var wire 1 =# B $end
$var wire 1 4# CIN $end
$var wire 1 :# SUM $end
$var wire 1 9# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 ># cin $end
$var wire 3 ?# comp [2:0] $end
$var wire 2 @# operation [1:0] $end
$var wire 1 A# src1 $end
$var wire 1 B# src2 $end
$var wire 1 C# cout $end
$var wire 1 D# add_result $end
$var reg 1 E# result $end
$scope module add_part $end
$var wire 1 F# A $end
$var wire 1 G# B $end
$var wire 1 ># CIN $end
$var wire 1 D# SUM $end
$var wire 1 C# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 H# cin $end
$var wire 3 I# comp [2:0] $end
$var wire 2 J# operation [1:0] $end
$var wire 1 K# src1 $end
$var wire 1 L# src2 $end
$var wire 1 M# cout $end
$var wire 1 N# add_result $end
$var reg 1 O# result $end
$scope module add_part $end
$var wire 1 P# A $end
$var wire 1 Q# B $end
$var wire 1 H# CIN $end
$var wire 1 N# SUM $end
$var wire 1 M# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 R# cin $end
$var wire 3 S# comp [2:0] $end
$var wire 2 T# operation [1:0] $end
$var wire 1 U# src1 $end
$var wire 1 V# src2 $end
$var wire 1 W# cout $end
$var wire 1 X# add_result $end
$var reg 1 Y# result $end
$scope module add_part $end
$var wire 1 Z# A $end
$var wire 1 [# B $end
$var wire 1 R# CIN $end
$var wire 1 X# SUM $end
$var wire 1 W# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 \# cin $end
$var wire 3 ]# comp [2:0] $end
$var wire 2 ^# operation [1:0] $end
$var wire 1 _# src1 $end
$var wire 1 `# src2 $end
$var wire 1 a# cout $end
$var wire 1 b# add_result $end
$var reg 1 c# result $end
$scope module add_part $end
$var wire 1 d# A $end
$var wire 1 e# B $end
$var wire 1 \# CIN $end
$var wire 1 b# SUM $end
$var wire 1 a# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 f# cin $end
$var wire 3 g# comp [2:0] $end
$var wire 2 h# operation [1:0] $end
$var wire 1 i# src1 $end
$var wire 1 j# src2 $end
$var wire 1 k# cout $end
$var wire 1 l# add_result $end
$var reg 1 m# result $end
$scope module add_part $end
$var wire 1 n# A $end
$var wire 1 o# B $end
$var wire 1 f# CIN $end
$var wire 1 l# SUM $end
$var wire 1 k# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 p# cin $end
$var wire 3 q# comp [2:0] $end
$var wire 2 r# operation [1:0] $end
$var wire 1 s# src1 $end
$var wire 1 t# src2 $end
$var wire 1 u# cout $end
$var wire 1 v# add_result $end
$var reg 1 w# result $end
$scope module add_part $end
$var wire 1 x# A $end
$var wire 1 y# B $end
$var wire 1 p# CIN $end
$var wire 1 v# SUM $end
$var wire 1 u# COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 z# cin $end
$var wire 3 {# comp [2:0] $end
$var wire 2 |# operation [1:0] $end
$var wire 1 }# src1 $end
$var wire 1 ~# src2 $end
$var wire 1 !$ cout $end
$var wire 1 "$ add_result $end
$var reg 1 #$ result $end
$scope module add_part $end
$var wire 1 $$ A $end
$var wire 1 %$ B $end
$var wire 1 z# CIN $end
$var wire 1 "$ SUM $end
$var wire 1 !$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 &$ cin $end
$var wire 3 '$ comp [2:0] $end
$var wire 2 ($ operation [1:0] $end
$var wire 1 )$ src1 $end
$var wire 1 *$ src2 $end
$var wire 1 +$ cout $end
$var wire 1 ,$ add_result $end
$var reg 1 -$ result $end
$scope module add_part $end
$var wire 1 .$ A $end
$var wire 1 /$ B $end
$var wire 1 &$ CIN $end
$var wire 1 ,$ SUM $end
$var wire 1 +$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 0$ cin $end
$var wire 3 1$ comp [2:0] $end
$var wire 2 2$ operation [1:0] $end
$var wire 1 3$ src1 $end
$var wire 1 4$ src2 $end
$var wire 1 5$ cout $end
$var wire 1 6$ add_result $end
$var reg 1 7$ result $end
$scope module add_part $end
$var wire 1 8$ A $end
$var wire 1 9$ B $end
$var wire 1 0$ CIN $end
$var wire 1 6$ SUM $end
$var wire 1 5$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 :$ cin $end
$var wire 3 ;$ comp [2:0] $end
$var wire 2 <$ operation [1:0] $end
$var wire 1 =$ src1 $end
$var wire 1 >$ src2 $end
$var wire 1 ?$ cout $end
$var wire 1 @$ add_result $end
$var reg 1 A$ result $end
$scope module add_part $end
$var wire 1 B$ A $end
$var wire 1 C$ B $end
$var wire 1 :$ CIN $end
$var wire 1 @$ SUM $end
$var wire 1 ?$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 D$ cin $end
$var wire 3 E$ comp [2:0] $end
$var wire 2 F$ operation [1:0] $end
$var wire 1 G$ src1 $end
$var wire 1 H$ src2 $end
$var wire 1 I$ cout $end
$var wire 1 J$ add_result $end
$var reg 1 K$ result $end
$scope module add_part $end
$var wire 1 L$ A $end
$var wire 1 M$ B $end
$var wire 1 D$ CIN $end
$var wire 1 J$ SUM $end
$var wire 1 I$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 N$ cin $end
$var wire 3 O$ comp [2:0] $end
$var wire 2 P$ operation [1:0] $end
$var wire 1 Q$ src1 $end
$var wire 1 R$ src2 $end
$var wire 1 S$ cout $end
$var wire 1 T$ add_result $end
$var reg 1 U$ result $end
$scope module add_part $end
$var wire 1 V$ A $end
$var wire 1 W$ B $end
$var wire 1 N$ CIN $end
$var wire 1 T$ SUM $end
$var wire 1 S$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module a $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 X$ cin $end
$var wire 3 Y$ comp [2:0] $end
$var wire 2 Z$ operation [1:0] $end
$var wire 1 [$ src1 $end
$var wire 1 \$ src2 $end
$var wire 1 ]$ cout $end
$var wire 1 ^$ add_result $end
$var reg 1 _$ result $end
$scope module add_part $end
$var wire 1 `$ A $end
$var wire 1 a$ B $end
$var wire 1 X$ CIN $end
$var wire 1 ^$ SUM $end
$var wire 1 ]$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$scope module last $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 b$ cin $end
$var wire 1 c$ equal_in $end
$var wire 2 d$ operation [1:0] $end
$var wire 1 e$ src1 $end
$var wire 1 f$ src2 $end
$var wire 1 g$ cout $end
$var wire 1 h$ add_result $end
$var reg 1 i$ result $end
$scope module add_part $end
$var wire 1 j$ A $end
$var wire 1 k$ B $end
$var wire 1 b$ CIN $end
$var wire 1 h$ SUM $end
$var wire 1 g$ COUT $end
$upscope $end
$upscope $end
$scope module start $end
$var wire 1 L A_invert $end
$var wire 1 M B_invert $end
$var wire 1 l$ cin $end
$var wire 3 m$ comp [2:0] $end
$var wire 2 n$ operation [1:0] $end
$var wire 1 o$ src1 $end
$var wire 1 p$ src2 $end
$var wire 1 q$ cout $end
$var wire 1 r$ add_result $end
$var reg 1 s$ result $end
$scope module add_part $end
$var wire 1 t$ A $end
$var wire 1 u$ B $end
$var wire 1 l$ CIN $end
$var wire 1 r$ SUM $end
$var wire 1 q$ COUT $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 v$ src2_i [31:0] $end
$var wire 32 w$ sum_o [31:0] $end
$var wire 32 x$ src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 y$ src2_i [31:0] $end
$var wire 32 z$ sum_o [31:0] $end
$var wire 32 {$ src1_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 |$ instr_op_i [5:0] $end
$var reg 1 * ALUSrc_o $end
$var reg 3 }$ ALU_op_o [2:0] $end
$var reg 1 ( Branch_eq $end
$var reg 1 ) Branch_o $end
$var reg 1 & RegDst_o $end
$var reg 1 % RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 ~$ pc_addr_i [31:0] $end
$var reg 32 !% instr_o [31:0] $end
$var integer 32 "% i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 * select_i $end
$var wire 32 #% data1_i [31:0] $end
$var wire 32 $% data0_i [31:0] $end
$var reg 32 %% data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 &% data0_i [31:0] $end
$var wire 32 '% data1_i [31:0] $end
$var wire 1 (% select_i $end
$var reg 32 )% data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 *% data0_i [4:0] $end
$var wire 5 +% data1_i [4:0] $end
$var wire 1 & select_i $end
$var reg 5 ,% data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 -% pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 .% pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 /% RDaddr_i [4:0] $end
$var wire 32 0% RDdata_i [31:0] $end
$var wire 5 1% RSaddr_i [4:0] $end
$var wire 32 2% RSdata_o [31:0] $end
$var wire 5 3% RTaddr_i [4:0] $end
$var wire 32 4% RTdata_o [31:0] $end
$var wire 1 % RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 5% data_i [15:0] $end
$var wire 1 # sign_i $end
$var reg 32 6% data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 7% data_i [31:0] $end
$var wire 32 8% data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxx00 8%
b0xxxxxxxxxxxxxxxx 7%
b0xxxxxxxxxxxxxxxx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
x(%
bx '%
bx &%
bx %%
bx $%
b0xxxxxxxxxxxxxxxx #%
b100000 "%
bx !%
bx ~$
bx }$
bx |$
b0xxxxxxxxxxxxxxxx00 {$
bx z$
bx y$
bx x$
bx w$
b100 v$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
bx n$
bz m$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
bx d$
zc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
bx Z$
bz Y$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
bx P$
bz O$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
bx F$
bz E$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
bx <$
bz ;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
bx 2$
bz 1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
bx ($
bz '$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
bx |#
bz {#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
bx r#
bz q#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
bx h#
bz g#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
bx ^#
bz ]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
bx T#
bz S#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
bx J#
bz I#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
bx @#
bz ?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
bx 6#
bz 5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
bx ,#
bz +#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
bx "#
bz !#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
bx v"
bz u"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
bx l"
bz k"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
bx b"
bz a"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
bx X"
bz W"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
bx N"
bz M"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
bx D"
bz C"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
bx :"
bz 9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
bx 0"
bz /"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
bx &"
bz %"
x$"
x#"
x""
x!"
x~
x}
x|
x{
bx z
bz y
xx
xw
xv
xu
xt
xs
xr
xq
bx p
bz o
xn
xm
xl
xk
xj
xi
xh
xg
bx f
bz e
xd
xc
xb
xa
x`
x_
x^
x]
bx \
bz [
xZ
xY
xX
xW
xV
xU
xT
xS
bx R
bz Q
xP
bx O
bx N
xM
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
x@
bx ?
bx >
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
b0xxxxxxxxxxxxxxxx 4
bx 3
bx 2
b0xxxxxxxxxxxxxxxx00 1
bx 0
bx /
bx .
bx -
bx ,
bx +
x*
x)
x(
bx '
x&
x%
x$
z#
0"
0!
$end
#5000
0l$
bx0 K
b10001000 5
b10001000 z$
b10001000 '%
b10000100 1
b10000100 {$
b10000100 8%
0(%
0f$
1p$
0\$
0R$
0H$
0>$
04$
0*$
0~#
0t#
0j#
0`#
0V#
0L#
0B#
08#
0.#
0$#
0x"
0n"
0d"
0Z"
0P"
0F"
0<"
02"
0("
0|
0r
0h
0^
1T
b10 B
b10 E
b100001 4
b100001 #%
b100001 6%
b100001 7%
0;
b100 ,
b100 :
b100 <
1%
0*
b0 +
b0 9
b0 }$
0(
0)
1&
b11 7
b11 =
b11 H
b11 %%
0e$
0o$
0[$
0Q$
0G$
0=$
03$
0)$
0}#
0s#
0i#
0_#
0U#
0K#
0A#
07#
0-#
0##
0w"
0m"
0c"
0Y"
0O"
0E"
0;"
01"
0'"
0{
0q
0g
0]
1S
b101 C
b101 F
b0 0
b0 ,%
b0 /%
b100001 5%
b100001 8
b0 |$
b11 -
b11 $%
b11 4%
b11 3%
b10 .
b10 >
b10 I
b10 2%
b10 1%
b0 +%
b11 *%
b100 3
b100 )%
b100 -%
b10000110000000000100001 '
b10000110000000000100001 !%
b100 6
b100 w$
b100 y$
b100 &%
b0 2
b0 x$
b0 ~$
b0 .%
1!
#10000
0i$
0A
0h$
0g$
0_$
0b$
0^$
0]$
0U$
0X$
0T$
0S$
0K$
0N$
0J$
0I$
0A$
0D$
0@$
0?$
07$
0:$
06$
05$
0-$
00$
0,$
0+$
0#$
0&$
0"$
0!$
0w#
0z#
0v#
0u#
0m#
0p#
0l#
0k#
0c#
0f#
0b#
0a#
0Y#
0\#
0X#
0W#
0O#
0R#
0N#
0M#
0E#
0H#
0D#
0C#
0;#
0>#
0:#
09#
01#
04#
00#
0/#
0'#
0*#
0&#
0%#
0{"
0~"
0z"
0y"
0q"
0t"
0p"
0o"
0g"
0j"
0f"
0e"
0]"
0`"
0\"
0["
0S"
0V"
0R"
0Q"
0I"
0L"
0H"
0G"
0?"
0B"
0>"
0="
05"
08"
04"
03"
0+"
0."
0*"
0)"
0!"
0$"
0~
0}
0u
0x
0t
0s
0k
0n
0j
0i
1a
0d
1`
0_
b101 /
b101 D
b101 0%
0W
1Z
0$
b101 ?
b101 G
b101 O
0V
1U
b101 J
1s$
0P
1r$
b100 K
0q$
1Y
0c
0m
0w
0#"
0-"
07"
0A"
0K"
0U"
0_"
0i"
0s"
0}"
0)#
03#
0=#
0G#
0Q#
0[#
0e#
0o#
0y#
0%$
0/$
09$
0C$
0M$
0W$
0a$
0k$
1u$
1X
0b
0l
0v
0""
0,"
06"
0@"
0J"
0T"
0^"
0h"
0r"
0|"
0(#
02#
0<#
0F#
0P#
0Z#
0d#
0n#
0x#
0$$
0.$
08$
0B$
0L$
0V$
0`$
0j$
0t$
0@
b10 N
b10 R
b10 \
b10 f
b10 p
b10 z
b10 &"
b10 0"
b10 :"
b10 D"
b10 N"
b10 X"
b10 b"
b10 l"
b10 v"
b10 "#
b10 ,#
b10 6#
b10 @#
b10 J#
b10 T#
b10 ^#
b10 h#
b10 r#
b10 |#
b10 ($
b10 2$
b10 <$
b10 F$
b10 P$
b10 Z$
b10 d$
b10 n$
0M
0L
0!
1"
#15000
1k
1j
b1001 /
b1001 D
b1001 0%
1d
0Z
b1001 ?
b1001 G
b1001 O
0a
1c
b1001 J
0W
0Y
0`
1_
0V
b1000 K
0U
b10000010000100 1
b10000010000100 {$
b10000010000100 8%
1^
0T
1b
0X
b100000100001 4
b100000100001 #%
b100000100001 6%
b100000100001 7%
b101 7
b101 =
b101 H
b101 %%
1]
0S
b1 0
b1 ,%
b1 /%
b100000100001 5%
b101 -
b101 $%
b101 4%
b101 3%
b100 .
b100 >
b100 I
b100 2%
b100 1%
b1 +%
b101 *%
b1000 3
b1000 )%
b1000 -%
b100001010000100000100001 '
b100001010000100000100001 !%
b10000010001100 5
b10000010001100 z$
b10000010001100 '%
b1000 6
b1000 w$
b1000 y$
b1000 &%
b100 2
b100 x$
b100 ~$
b100 .%
1!
#20000
0!
#25000
1A
1g$
1b$
1]$
1X$
1S$
1N$
1I$
1D$
1?$
1:$
15$
10$
1+$
1&$
1!$
1z#
1u#
1p#
1k#
1f#
1a#
1\#
1W#
1R#
1M#
1H#
1C#
1>#
19#
14#
1/#
1*#
1%#
1~"
1y"
1t"
1o"
1j"
1e"
1`"
1["
1V"
1Q"
1L"
1G"
1B"
1="
18"
13"
1."
1)"
1$"
1}
0Z
1x
1a
0d
0U
1s
b111 /
b111 D
b111 0%
1`
0_
0i$
0P
0_$
0U$
0K$
0A$
07$
0-$
0#$
0w#
0m#
0c#
0Y#
0O#
0E#
0;#
01#
0'#
0{"
0q"
0g"
0]"
0S"
0I"
0?"
05"
0+"
0!"
0u
1n
b111 ?
b111 G
b111 O
1W
1s$
0u$
b111 J
0k
1m
0c
0h$
1r$
0q$
0^$
0T$
0J$
0@$
06$
0,$
0"$
0v#
0l#
0b#
0X#
0N#
0D#
0:#
00#
0&#
0z"
0p"
0f"
0\"
0R"
0H"
0>"
04"
0*"
0~
0t
0j
b111111111111111111111111111110000 K
1i
1V
b1100000010000100 1
b1100000010000100 {$
b1100000010000100 8%
0p$
1h
0^
1j$
1t$
1`$
1V$
1L$
1B$
18$
1.$
1$$
1x#
1n#
1d#
1Z#
1P#
1F#
1<#
12#
1(#
1|"
1r"
1h"
1^"
1T"
1J"
1@"
16"
1,"
1""
1v
1l
1X
b11000000100001 4
b11000000100001 #%
b11000000100001 6%
b11000000100001 7%
b1000 7
b1000 =
b1000 H
b1000 %%
1e$
1o$
1[$
1Q$
1G$
1=$
13$
1)$
1}#
1s#
1i#
1_#
1U#
1K#
1A#
17#
1-#
1##
1w"
1m"
1c"
1Y"
1O"
1E"
1;"
11"
1'"
1{
1q
1g
1S
b110 0
b110 ,%
b110 /%
b11000000100001 5%
b1000 -
b1000 $%
b1000 4%
b1000 3%
b11111111111111111111111111111111 .
b11111111111111111111111111111111 >
b11111111111111111111111111111111 I
b11111111111111111111111111111111 2%
b1010 1%
b110 +%
b1000 *%
b1100 3
b1100 )%
b1100 -%
b1010010000011000000100001 '
b1010010000011000000100001 !%
b1100000010010000 5
b1100000010010000 z$
b1100000010010000 '%
b1100 6
b1100 w$
b1100 y$
b1100 &%
b1000 2
b1000 x$
b1000 ~$
b1000 .%
1!
#30000
0!
#35000
0$
0s$
1P
0a
1d
0@
b1010 /
b1010 D
b1010 0%
0r$
1q$
0`
1_
0i$
0_$
0b$
0U$
0X$
0K$
0N$
0A$
0D$
07$
0:$
0-$
00$
0#$
0&$
0w#
0z#
0m#
0p#
0c#
0f#
0Y#
0\#
0O#
0R#
0E#
0H#
0;#
0>#
01#
04#
0'#
0*#
0{"
0~"
0q"
0t"
0g"
0j"
0]"
0`"
0S"
0V"
0I"
0L"
0?"
0B"
05"
08"
0+"
0."
0!"
0$"
0u
0x
0n
b1010 ?
b1010 G
b1010 O
0A
1W
1u$
b1010 J
1k
0m
1c
0h$
0g$
0^$
0]$
0T$
0S$
0J$
0I$
0@$
0?$
06$
05$
0,$
0+$
0"$
0!$
0v#
0u#
0l#
0k#
0b#
0a#
0X#
0W#
0N#
0M#
0D#
0C#
0:#
09#
00#
0/#
0&#
0%#
0z"
0y"
0p"
0o"
0f"
0e"
0\"
0["
0R"
0Q"
0H"
0G"
0>"
0="
04"
03"
0*"
0)"
0~
0}
0t
0s
1j
b1010 K
0i
1V
b0 1
b0 {$
b0 8%
1p$
0h
1^
0j$
0`$
0V$
0L$
0B$
08$
0.$
0$$
0x#
0n#
0d#
0Z#
0P#
0F#
0<#
02#
0(#
0|"
0r"
0h"
0^"
0T"
0J"
0@"
06"
0,"
0""
0v
0l
0X
b0 4
b0 #%
b0 6%
b0 7%
b101 7
b101 =
b101 H
b101 %%
0e$
0[$
0Q$
0G$
0=$
03$
0)$
0}#
0s#
0i#
0_#
0U#
0K#
0A#
07#
0-#
0##
0w"
0m"
0c"
0Y"
0O"
0E"
0;"
01"
0'"
0{
0q
0g
0S
b0 0
b0 ,%
b0 /%
b0 5%
b0 8
b101 -
b101 $%
b101 4%
b0 3%
b101 .
b101 >
b101 I
b101 2%
b0 1%
b0 +%
b0 *%
b10000 3
b10000 )%
b10000 -%
b0 '
b0 !%
b10000 5
b10000 z$
b10000 '%
b10000 6
b10000 w$
b10000 y$
b10000 &%
b1100 2
b1100 x$
b1100 ~$
b1100 .%
1!
#40000
0!
#45000
b10100 /
b10100 D
b10100 0%
b10100 ?
b10100 G
b10100 O
0W
1u
0k
b10100 J
1a
0V
1t
0j
1`
0P
1n
0d
1Z
0q$
1i
0_
b10100 K
1U
0u$
1m
0c
1Y
0t$
1l
0b
1X
0p$
1h
0^
1T
b10100 3
b10100 )%
b10100 -%
0o$
1g
0]
1S
b1010 7
b1010 =
b1010 H
b1010 %%
b10100 5
b10100 z$
b10100 '%
b10100 6
b10100 w$
b10100 y$
b10100 &%
b10000 2
b10000 x$
b10000 ~$
b10000 .%
b1010 .
b1010 >
b1010 I
b1010 2%
b1010 -
b1010 $%
b1010 4%
1!
